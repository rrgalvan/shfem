int N=3;
// mesh Th=square(N,N);
// savemesh(Th,"nombre-malla.msh");

mesh Th=readmesh("square_" + N +".msh");

fespace Vh(Th,P1);
Vh uh, vh;
func exactSolution = sin(pi*x)*sin(pi*y);
func fRhs = 4; //2*pi*pi*sin(pi*x)*sin(pi*y);
func fDirichlet=0;

plot(Th);

varf poisson(uh,vh)=
  // Bilinear form
  int2d(Th)(dx(uh)*dx(vh) + dy(uh)*dy(vh))
  // Linear form (in left hand side of equation)
  - int2d(Th)(fRhs*vh)
  + on(1,2,3,4,uh=fDirichlet)
  ;

matrix A=poisson(Vh,Vh);
real[int] b=poisson(0,Vh);
b=-b; // Correct minus sing (pass to right hand side)

uh[] = A^-1*b;  // Solve system

// Imprimir la matriz. Como es una matriz dispersa, se imprime
// como una lista  "i j A(i,j)"
cout << "***Matrix:" << endl << A << endl;
cout << "***rhs:" << endl << b << endl;
cout << "***solution:" << endl << uh[] << endl;

Vh ue = exactSolution(x,y);
cout << "***L2 error:" << sqrt(int2d(Th)(square(uh-ue))) << endl;

plot(uh, fill=true, value=true, wait=1);

// Read and post-rocess an external solution (e.g. from shfem library)
Vh uext;
string solfile="sol_square_n=" + N + ".txt";
ifstream ii(solfile);
ii >> uext[];
cout << "FreeFem++ solution: " << uh[] << endl;
cout << "External solution: " << uext[] << endl;
cout << "Diference with FreeFem++ solution (L2 norm): " <<
  sqrt(int2d(Th)(square(uh-uext))) << endl;

// Plot and save it to vtk (for further post-processing)
// plot(uext, fill=true);

load "iovtk";
string vtkFile = "solution.vtk";
savevtk(vtkFile, Th, uext, dataname="u");
